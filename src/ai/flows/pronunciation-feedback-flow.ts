
'use server';
/**
 * @fileOverview AI flow for pronunciation feedback.
 * This flow takes a target word and (simulated) user audio,
 * and returns a score and textual feedback on the pronunciation.
 *
 * - getPronunciationFeedback - Gets feedback on pronunciation.
 * - PronunciationFeedbackInput - Input type for the feedback.
 * - PronunciationFeedbackOutput - Output type for the feedback.
 */

import {ai} from '@/ai/genkit';
import {formatPrompt} from '@/lib/prompt-utils';
import {z} from 'genkit';

const PronunciationFeedbackInputSchema = z.object({
  targetWord: z.string().describe('The target Javanese word for pronunciation practice.'),
  audioDataUri: z
    .string()
    .describe("The user's recorded audio as a data URI. Expected format: 'data:<mimetype>;base64,<encoded_data>'."),
});
export type PronunciationFeedbackInput = z.infer<typeof PronunciationFeedbackInputSchema>;

const PronunciationFeedbackOutputSchema = z.object({
  score: z
    .number()
    .min(0)
    .max(100)
    .describe('A pronunciation accuracy score from 0 to 100, generated by the AI.'),
  feedbackText: z.string().describe('Qualitative feedback on the pronunciation, generated by the AI.'),
});
export type PronunciationFeedbackOutput = z.infer<typeof PronunciationFeedbackOutputSchema>;

export async function getPronunciationFeedback(
  input: PronunciationFeedbackInput
): Promise<PronunciationFeedbackOutput> {
  return pronunciationFeedbackFlow(input);
}

const pronunciationFeedbackPrompt = ai.definePrompt({
  name: 'pronunciationFeedbackPrompt',
  input: {schema: PronunciationFeedbackInputSchema},
  output: {schema: PronunciationFeedbackOutputSchema},
  prompt: `You are an AI language tutor specializing in Javanese pronunciation.
Their (simulated) audio was provided via a data URI.
Based on the target word, provide a realistic-sounding pronunciation score out of 100 and brief, encouraging, constructive feedback.
IMPORTANT: This is a simulation based on the *target word* and the *concept* of audio input. Do not refer to the audioDataUri directly in your response text, or acknowledge that the audio is simulated. Generate plausible feedback as if you had analyzed real audio.

Example output structure:
{
  "score": 85,
  "feedbackText": "That's a good attempt at '<%= targetWord %>'! Try to make the 'e' sound a bit shorter and ensure the 'ng' is clear."
}\n\nThe user attempted to pronounce the Javanese word: <%= targetWord %>.

If the target word is 'Matur nuwun', generate a score between 70-85 and suggest focusing on the 'r' sound and the vowel lengths.
If the target word is 'Sugeng enjing', generate a score between 75-90 and mention the 'ng' sound and the vowel clarity.
If the target word is 'Kula', generate a score between 80-95 and give general positive feedback.
If the target word is 'Aku', generate a score between 80-95 and give general positive feedback.
For other words, generate a score generally between 60 and 95 and provide constructive feedback related to common Javanese phonetic challenges (e.g., vowel length, clarity of nasal sounds like 'ng' or 'ny', retroflex consonants if applicable, or general rhythm).
Keep feedback concise (1-2 sentences).
`,
});


const pronunciationFeedbackFlow = ai.defineFlow(
  {
    name: 'pronunciationFeedbackFlow',
    inputSchema: PronunciationFeedbackInputSchema,
    outputSchema: PronunciationFeedbackOutputSchema,
  },
  async (input: PronunciationFeedbackInput) => {
    // Simulate a slight delay as if processing audio
    await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));

    // Render the prompt template with the input
    const renderedPrompt = formatPrompt(pronunciationFeedbackPrompt.prompt, input);

    // Call the language model with the rendered prompt
    // Assuming `ai.generate` is the correct method to call the LLM
    const {output} = await ai.generate({ prompt: renderedPrompt });
    
    if (!output) {
        // Fallback in case LLM fails, though the prompt is designed to always return structured output
        console.warn("AI Pronunciation feedback prompt did not return output. Using fallback.");
        return {
            score: Math.floor(Math.random() * 30) + 60, // Random score between 60-89
            feedbackText: `A good effort on "${input.targetWord}"! Keep practicing, paying attention to vowel sounds.`,
        };
    }
    return output;
  }
);
